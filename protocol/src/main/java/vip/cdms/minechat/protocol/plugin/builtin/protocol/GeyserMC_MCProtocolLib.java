package vip.cdms.minechat.protocol.plugin.builtin.protocol;

import static vip.cdms.mcoreui.util.MCTextParser.SS;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.Typeface;
import android.net.Uri;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextPaint;
import android.text.style.StrikethroughSpan;
import android.text.style.StyleSpan;
import android.text.style.UnderlineSpan;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.github.steveice10.mc.auth.exception.request.RequestException;
import com.github.steveice10.mc.protocol.MinecraftProtocol;
import com.github.steveice10.mc.protocol.codec.MinecraftCodec;
import com.github.steveice10.mc.protocol.packet.common.clientbound.ClientboundKeepAlivePacket;
import com.github.steveice10.mc.protocol.packet.common.clientbound.ClientboundCustomPayloadPacket;
import com.github.steveice10.mc.protocol.packet.configuration.clientbound.ClientboundUpdateEnabledFeaturesPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundChangeDifficultyPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundCommandsPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundCustomChatCompletionsPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundDelimiterPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundLoginPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundPlayerChatPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundSystemChatPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundTabListPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.ClientboundUpdateAdvancementsPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundAnimatePacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundEntityEventPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundMoveEntityPosPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundMoveEntityPosRotPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundMoveEntityRotPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundRemoveEntitiesPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundRotateHeadPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundSetEntityDataPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundSetEntityMotionPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundSetEquipmentPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundTeleportEntityPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.ClientboundUpdateAttributesPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.player.ClientboundPlayerAbilitiesPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.player.ClientboundPlayerPositionPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.player.ClientboundSetCarriedItemPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.player.ClientboundSetExperiencePacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.player.ClientboundSetHealthPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.entity.spawn.ClientboundAddEntityPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundBlockEventPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundGameEventPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundLevelChunkWithLightPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundLevelEventPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundSetChunkCacheRadiusPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundSetDefaultSpawnPositionPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundSetSimulationDistancePacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundSetTimePacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.level.ClientboundSoundPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.scoreboard.ClientboundSetDisplayObjectivePacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.scoreboard.ClientboundSetObjectivePacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.scoreboard.ClientboundSetPlayerTeamPacket;
import com.github.steveice10.mc.protocol.packet.ingame.clientbound.scoreboard.ClientboundSetScorePacket;
import com.github.steveice10.mc.protocol.packet.ingame.serverbound.ServerboundChatCommandPacket;
import com.github.steveice10.mc.protocol.packet.ingame.serverbound.ServerboundChatPacket;
import com.github.steveice10.mc.protocol.packet.login.clientbound.ClientboundGameProfilePacket;
import com.github.steveice10.mc.protocol.packet.login.clientbound.ClientboundLoginCompressionPacket;
import com.github.steveice10.packetlib.Session;
import com.github.steveice10.packetlib.event.session.ConnectedEvent;
import com.github.steveice10.packetlib.event.session.DisconnectedEvent;
import com.github.steveice10.packetlib.event.session.DisconnectingEvent;
import com.github.steveice10.packetlib.event.session.PacketErrorEvent;
import com.github.steveice10.packetlib.event.session.PacketSendingEvent;
import com.github.steveice10.packetlib.event.session.SessionListener;
import com.github.steveice10.packetlib.packet.Packet;
import com.github.steveice10.packetlib.tcp.TcpClientSession;
import com.google.gson.JsonArray;

import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.TextComponent;
import net.kyori.adventure.text.format.Style;
import net.kyori.adventure.text.format.TextColor;
import net.kyori.adventure.text.format.TextDecoration;

import java.time.Instant;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.function.Consumer;

import vip.cdms.mcoreui.util.ImageUtils;
import vip.cdms.mcoreui.view.dialog.DialogBuilder;
import vip.cdms.mcoreui.util.MCFontWrapper;
import vip.cdms.mcoreui.util.MCTextParser;
import vip.cdms.mcoreui.util.PixelFont;
import vip.cdms.mcoreui.view.dialog.CustomFormBuilder;
import vip.cdms.minechat.protocol.dataexchange.bean.Account;
import vip.cdms.minechat.protocol.dataexchange.client.Client;
import vip.cdms.minechat.protocol.dataexchange.client.SimpleClientRepeater;
import vip.cdms.minechat.protocol.dataexchange.client.SimpleClientRepeaterHelper;
import vip.cdms.minechat.protocol.dataexchange.ui.PlayerListController;
import vip.cdms.minechat.protocol.dataexchange.ui.ScoreboardController;
import vip.cdms.minechat.protocol.dataexchange.ui.TitleController;
import vip.cdms.minechat.protocol.plugin.JLanguage;
import vip.cdms.minechat.protocol.plugin.ProtocolProvider;
import vip.cdms.minechat.protocol.util.AccountUtils;
import vip.cdms.minechat.protocol.util.ExceptionHandler;
import vip.cdms.minechat.protocol.util.motd.JEMotdChecker;
import vip.cdms.minechat.protocol.util.motd.MotdChecker;

public class GeyserMC_MCProtocolLib extends ProtocolProvider {
    JLanguage lang = new JLanguage();
    public GeyserMC_MCProtocolLib(Activity activity, SharedPreferences sharedPreferences, ExceptionHandler exceptionHandler) {
        super(activity, sharedPreferences, exceptionHandler);
        lang.set(activity);
        setPluginIcon("");
        setPluginTitle("GeyserMC/MCProtocolLib");
        setPluginSummary(lang.add("[built-in] provide the protocol of Minecraft Java Edition " + MinecraftCodec.CODEC.getMinecraftVersion(), "[内置] 可提供Java版MC" + MinecraftCodec.CODEC.getMinecraftVersion() + "服务器协议"));
    }
    @Override
    public void openPluginAbout() {
        new DialogBuilder(getActivity())
                .setTitle(getPluginTitle())
                .setContent(getPluginSummary()
                        + "\n\n"
                        + lang.add("Click the button below to visit the Github repository of the project that provides the backend protocol implementation", "单击下面的按钮访问提供后端协议实现的项目的 Github 存储库"))
                .addAction(
                        lang.add("Github repository", "Github存储库"),
                        v -> getActivity().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://github.com/GeyserMC/MCProtocolLib")))
                )
                .show();
    }

//    @Override
//    public void openPluginSetting() {
//
//    }

    /** @noinspection DataFlowIssue*/
    @Override
    public void createOrEdit(@Nullable ServerConfig config, Consumer<ServerConfig> configCallback) {
        AccountUtils.AccountSelector accountSelector = new AccountUtils.AccountSelector(lang, config);

        String displayName = ror(() -> config.get("name").getAsString(), "");
        String host = ror(() -> config.host(), "");
        String port = ror(() -> String.valueOf(config.port()), "");

        new CustomFormBuilder()
                .setTitle(config == null ? lang.add("Add a server", "添加服务器") : lang.add("Edit the server", "编辑服务器"))
                .processing(accountSelector)
                .addInput(lang.add("Display name", "显示名称"), "Minecraft Server", displayName)
                .addInput(lang.add("Host", "地址"), "127.0.0.1", host)
                .addInput(lang.add("Port", "端口"), "25565", port)
                .setCallback(callback -> tryCatch(() -> {
                    if (callback.isCancel()) return;
                    JsonArray response = callback.responseData();

                    String mName = response.get(1).getAsString();
                    if (mName.isEmpty()) mName = "Minecraft Server";
                    String mHost = response.get(2).getAsString();
                    if (mHost.isEmpty()) mHost = "127.0.0.1";
                    String mPort = response.get(3).getAsString();
                    if (mPort.isEmpty()) mPort = "25565";

                    ServerConfig edited = new ServerConfig(mHost, Integer.parseInt(mPort));
                    accountSelector.save(callback, edited);
                    edited.add("name", mName);
                    configCallback.accept(edited);
                }))
                .show(getActivity());
    }

    @Override
    public void motd(ServerConfig config, MotdCallback motdCallback) {
        motdCallback.title(MCFontWrapper.WRAPPER.wrap(config.get("name").getAsString()));
        String host = config.host();
        int port = config.port();

        JEMotdChecker.JEMotd motd = JEMotdChecker.get(host, port);
        if (motd == null) {
            motdCallback.summary(MCFontWrapper.WRAPPER.wrap(SS + "4Timed out"));
            return;
        }

        motdCallback.summary(MCFontWrapper.WRAPPER.wrap(motd.motd()+ " - " + motd.version()));
        motdCallback.topText(motd.onlinePlayer() + "/" + motd.maxPlayer());
        motdCallback.topIcon(MotdChecker.delayIcon(getActivity(), motd.delay()));

        String favicon = motd.favicon();
        if (favicon == null) return;
        motdCallback.icon(ImageUtils.base64ToDrawable(getActivity(), favicon));
    }

    @Override
    public void connect(ServerConfig config, Consumer<Client<?>> clientCallback) throws RequestException {
        // options
        Account account = AccountUtils.AccountSelector.getAccount(config);

        String host = config.host();
        int port = config.port();

        MinecraftProtocol protocol;
        if (account.isOnline()) {
//            MsaAuthenticationService authService = new MsaAuthenticationService("");
//            authService.setUsername(account.username());
//            authService.setPassword(PASSWORD);
//            authService.setProxy(AUTH_PROXY);
//            authService.login();
//            protocol = new MinecraftProtocol(authService.getSelectedProfile(), authService.getAccessToken());
//             todo
            throw new RuntimeException(lang.add("Genuine login is not available", "暂不支持正版登录").toString());
        } else {
            protocol = new MinecraftProtocol(account.username());
        }

        Session session = new TcpClientSession(host, port, protocol, null);

        SimpleClientRepeater simpleClient = new SimpleClientRepeater();
        final SimpleClientRepeaterHelper clientHelper = simpleClient.helper()
                .setOnMoreClickListener(v -> {
                })
                .setOnMessageListener(message -> {
                    session.send(new ServerboundChatPacket(message, Instant.now().toEpochMilli(), 0L, null, 0, new BitSet()));
                })
                .setOnCommandListener(command -> {
                    command = command.substring(1);
                    if (command.isEmpty()) return;
                    session.send(new ServerboundChatCommandPacket(command, Instant.now().toEpochMilli(), 0L, new ArrayList<>(), 0, new BitSet()));
                })
                .setOnCloseListener(() -> {
                    session.disconnect("disconnect.disconnected");
                })
                .setOnPacketSendListener((name, params) -> {
                })
                .setOnEventAddListener((name, callback) -> {
                });
        clientCallback.accept(simpleClient);
        clientHelper.connectingProgress("- " + lang.add("Connecting to server...", "正在连接服务器..."));
        TitleController titleController = clientHelper.getTitleController();
        ScoreboardController scoreboardController = clientHelper.getScoreboardController();
        PlayerListController playerListController = clientHelper.getPlayerListController();

        session.addListener(new SessionListener() {
            @Override
            public void packetReceived(Session session, Packet packet) {
                if (
                        packet instanceof ClientboundKeepAlivePacket
                        || packet instanceof ClientboundMoveEntityPosRotPacket
                        || packet instanceof ClientboundRotateHeadPacket
                        || packet instanceof ClientboundSetEntityMotionPacket
                        || packet instanceof ClientboundMoveEntityPosPacket
                        || packet instanceof ClientboundLevelChunkWithLightPacket
                        || packet instanceof ClientboundTeleportEntityPacket
                        || packet instanceof ClientboundRemoveEntitiesPacket
                        || packet instanceof ClientboundSetTimePacket
                        || packet instanceof ClientboundCommandsPacket
                        || packet instanceof ClientboundMoveEntityRotPacket
                        || packet instanceof ClientboundUpdateAttributesPacket
                        || packet instanceof ClientboundSetEntityDataPacket
                        || packet instanceof ClientboundDelimiterPacket
                        || packet instanceof ClientboundAddEntityPacket
                        || packet instanceof ClientboundEntityEventPacket
                        || packet instanceof ClientboundSetEquipmentPacket
                        || packet instanceof ClientboundSetExperiencePacket
                        || packet instanceof ClientboundSetHealthPacket
                        || packet instanceof ClientboundPlayerAbilitiesPacket
                        || packet instanceof ClientboundLevelEventPacket
                        || packet instanceof ClientboundUpdateAdvancementsPacket
                        || packet instanceof ClientboundSetDefaultSpawnPositionPacket
//                        || packet instanceof ClientboundPlayerInfoUpdatePacket
                        || packet instanceof ClientboundCustomChatCompletionsPacket
                        || packet instanceof ClientboundSetPlayerTeamPacket
//                        || packet instanceof ClientboundServerDataPacket  // 包含服务器信息
                        || packet instanceof ClientboundChangeDifficultyPacket
                        || packet instanceof ClientboundCustomPayloadPacket
                        || packet instanceof ClientboundUpdateEnabledFeaturesPacket
                        || packet instanceof ClientboundLoginPacket
                        || packet instanceof ClientboundGameProfilePacket
                        || packet instanceof ClientboundLoginCompressionPacket
                        || packet instanceof ClientboundSoundPacket
                        || packet instanceof ClientboundAnimatePacket
                        || packet instanceof ClientboundGameEventPacket
                        || packet instanceof ClientboundSetCarriedItemPacket
                        || packet instanceof ClientboundPlayerPositionPacket
                        || packet instanceof ClientboundSetChunkCacheRadiusPacket
                        || packet instanceof ClientboundSetSimulationDistancePacket
                        || packet instanceof ClientboundBlockEventPacket
//                        || packet instanceof
                        || packet instanceof ClientboundSetScorePacket             // 计分板
                        || packet instanceof ClientboundSetObjectivePacket         // 计分板
                        || packet instanceof ClientboundSetDisplayObjectivePacket  // 计分板
                ) return;  // todo 暂时不管这些

                if (packet instanceof ClientboundTabListPacket tabListPacket) {
                    playerListController.setTitle(pixel(tabListPacket.getHeader(), null, null, tabListPacket.getFooter()));
                } else if (packet instanceof ClientboundSystemChatPacket systemChatPacket) {
                    clientHelper.print(pixel(systemChatPacket.getContent()));
                } else if (packet instanceof ClientboundPlayerChatPacket playerChatPacket) {
                    clientHelper.print(pixel("<", playerChatPacket.getName(), "> ", playerChatPacket.getContent()));
                } else {
                    System.out.println(packet);
                }
            }

            @Override
            public void packetSending(PacketSendingEvent event) {
            }

            @Override
            public void packetSent(Session session, Packet packet) {
                System.out.println(packet);
            }

            @Override
            public void packetError(PacketErrorEvent event) {
                System.out.println("Packet Error " + event);
            }

            @Override
            public void connected(ConnectedEvent event) {
                clientHelper.connected();
            }

            @Override
            public void disconnecting(DisconnectingEvent event) {
                System.out.println("disconnecting " + event);
            }

            @Override
            public void disconnected(DisconnectedEvent event) {
                if (event.getCause() != null) {
                    clientHelper.error(event.getCause());
                    return;
                }
                clientHelper.close(pixel(event.getReason()));
            }
        });

        session.connect();
    }

    /** @noinspection LoopStatementThatDoesntLoop*/
    Object[] _component(Component component) {
        String toString = "";
        SpannableStringBuilder spannable = new SpannableStringBuilder();

        for (;;) {
            if (component instanceof TextComponent textComponent) {
                Style style = textComponent.style();
                TextColor color = style.color();
                boolean bold = style.decoration(TextDecoration.BOLD) == TextDecoration.State.TRUE;
                boolean italic = style.decoration(TextDecoration.ITALIC) == TextDecoration.State.TRUE;
                boolean underlined = style.decoration(TextDecoration.UNDERLINED) == TextDecoration.State.TRUE;
                boolean strikethrough = style.decoration(TextDecoration.STRIKETHROUGH) == TextDecoration.State.TRUE;
                boolean obfuscated = style.decoration(TextDecoration.OBFUSCATED) == TextDecoration.State.TRUE;

                int start = spannable.length();
                String content = textComponent.content();
                spannable.append(MCTextParser.text2CharSequence(content, false));
                int end = spannable.length();
                if (end - start == 0) break;

                String colour = "";
                if (color != null) for (var key : MCTextParser.COLORS.keySet()) {
                    var value = MCTextParser.COLORS.get(key);
                    if (color.asHexString().substring(1).toUpperCase().equals(value)) {
                        colour = key;
                        break;
                    }
                }
                toString += SS + "r" + colour
                        + (bold ? SS + "l" : "")
                        + (italic ? SS + "o" : "")
                        + (underlined ? SS + "n" : "")
                        + (strikethrough ? SS + "m" : "")
                        + (obfuscated ? SS + "k" : "")
                        + content;

                spannable.setSpan(new UnderlineSpan() {
                    @Override
                    public void updateDrawState(@NonNull TextPaint ds) {
                        if (color != null) ds.setColor(Color.argb(255, color.red(), color.green(), color.blue()));
//                        if (color != null) ds.setColor(0xff000000 | (color.value() << 8));
                        ds.setUnderlineText(underlined);
                    }
                }, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                if (bold && !italic) spannable.setSpan(new StyleSpan(Typeface.BOLD), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                else if (italic && !bold) spannable.setSpan(new StyleSpan(Typeface.ITALIC), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                else if (italic/* && bold*/) spannable.setSpan(new StyleSpan(Typeface.BOLD_ITALIC), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                if (strikethrough) spannable.setSpan(new StrikethroughSpan(), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
            break;
        }

        StringBuilder toStringBuilder = new StringBuilder(toString);
        for (Component child : component.children()) {
            Object[] parsed = _component(child);
            spannable.append((SpannableStringBuilder) parsed[0]);
            toStringBuilder.append(parsed[1]);
        }
        toString = toStringBuilder.toString();

        return new Object[] { spannable, toString };
    }
    CharSequence pixel(Object... items) {
        SpannableStringBuilder spannable = new SpannableStringBuilder();
        StringBuilder toString = new StringBuilder();
        for (Object item : items) {
            if (item == null) {
                spannable.append("\n");
                toString.append("\n");
                continue;
            }

            if (item instanceof Component component) {
                Object[] parsed = _component(component);
                spannable.append((SpannableStringBuilder) parsed[0]);
                toString.append(parsed[1]);
            } else if (item instanceof String string) {
                spannable.append(MCTextParser.text2CharSequence(string, false));
                toString.append(string);
            } else {
                spannable.append(String.valueOf(item));
                toString.append(item);
            }
        }
        return new PixelFont(spannable) {
            @NonNull
            @Override
            public String toString() {
                StackTraceElement call = new Throwable().getStackTrace()[1];
                String callClass = call.getClassName();
                String callMethod = call.getMethodName();
                if ("java.lang.String".equals(callClass) && "valueOf".equals(callMethod))
                    return toString.toString();
                return super.toString();
            }
        };
    }
}
